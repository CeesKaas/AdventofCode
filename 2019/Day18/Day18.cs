using NUnit.Framework;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Day18
{
    public class Day18
    {
        public static void Execute()
        {
            var input = Parse("#################################################################################\n#...#.........P...................#.....#.........#.......#.........#...........#\n#.###.#############.#.###########.#.#.###.#########.###.###.#######.#.###########\n#.#...#.#...V.....#.#..t..#.......#.#..a#...........#.#..c..#...#.#.#...........#\n#.#.###.#.#######.#####.#.#####.#######.#.###########.#######.#.#.#.###########.#\n#...#...#...#.#...#.J.#.#.....#.........#.......#.......#.....#.#.#.......#...#.#\n#Z###.#####.#.#.###.#.###.###.#################.#.###.#.#.#####.#.#######.#.#.#.#\n#.....#...#.#.......#...#...#.#...#.....#...#.#.#.#...#.#...#.....#.......#.#.#.#\n###.###.#.#.###########.###.#.#.#.#.###.#.#.#.#.#.#.###.###.#######.#######.#.#.#\n#.#.#...#..y#.........#...#.#...#...#...#.#...#.#.#.#.......#.......#.......#...#\n#.#.#.#######.#######.###.#######.###.###.###.#.###.#######.#.#######.#########.#\n#.#.#..q........#.....#.#...#.E.#...#...#.#...#...#.....#.#.#.#...........#...#.#\n#.#.#############.#####.###.#.#.#######.#.###.###.#.###.#.#.#.#####.#####.#.#.#.#\n#.#...F.......#...#...#.......#.........#...#.#...#.#...#.#.#.....#.#.....#.#...#\n#.#########.###.###.#S###################.#I###.#####.###.#.#####.#.#.#########.#\n#...#...#...#...#...#....u......#.#.....#.#...#.#...#.#...#.....#.#.#.#.......#.#\n#.###.#.#.###.###.#############.#.#.###.#####.#.#.#.#.#.#######.#.#.#.#.#####.#.#\n#.#...#.#.#.#.#s..#...#hG.#...#.#.#...#.#.....#...#...#.#.......#.#.#...#...#.#.#\n#.#.###.#.#.#O#.###.#.#.#.#.#.#.#.#.###.#.###.#########.#.#######.###.###.###.#.#\n#m..#.#...#.#.#.#...#...#...#g#.#.#.#...#.#.#.#.........#.#.#...#...#.....#...#.#\n#.###.#####.#.#.#H###########.#.#.#.#.###.#.#.###.#.#####.#.#.#.#.#.#.#####.###.#\n#.#.........#...#.....#...#...#.#...#...#.#...#...#.#...#.#.#.#.#.#.#.#..w#.#.#.#\n#.#.#####.#.#############.#.###U###.###.#.#.###.###.#.#.#.#.###.###.#.#.#.#.#.#.#\n#.#.....#.#.#.....#.......#.#.....#.#...#.#.....#...#.#.#.#...#...#.#.#.#...#...#\n#.#######.#.###.#.#####.###.#####.###.#.#.#######.###.#.#.#.#####.#.###.#####.###\n#.#.......#.....#.....#...#.#...#b#...#.#.#.#.....#...#.....#.....#...#.#.....#.#\n#.#.#################.#.#.#.#.#.#.#.###.#.#.#.#####.#########.#######.#.#.#####.#\n#.#.#.......#.......#.#.#.#.B.#...#.#.#.#.#.....#...#.....#...#.......#.#...#...#\n#.#.#.#######.###.###.#.#.#########.#.#.#.#######.###.#.###.#####.#.###N###.#.###\n#.#.#...#.....#...#...#.#...........#.#.#.......#.#...#.#...#...#.#.#...#...#...#\n#.#.#.#.#.#####.###.###.###########.#.#.#.#####.#.#.###.#.###.#.###.#.###.###.#.#\n#...#.#.#.#...#.....#.#.#...#.......#...#.#..r#...#.#...#.....#.....#.#.#...#.#.#\n#######.#.###.#######.#.###.#.#######.###.###.#######.#.#############.#.###.#.#.#\n#.......#...#.......#.#...#.#.#.....#.#.#.....#.......#.......#.......#...#.#.#.#\n###.###.###.#.#####.#.###.#.#.###.#.#.#.#####.#.#.###########.###.#####.#.#.###.#\n#...#...#...#...#.#.#.......#...#.#.#.#.#.#...#.#...#...#...#...#.#.....#.#...#.#\n#D###.###.###.#.#.#.###########.#.###.#.#.#.###.###.#.#.#.#.###.#.#.###.#####.#.#\n#...#...#.#...#.#.#...........#.#.#...#.#...#...#...#.#...#...#...#.#.#.......#.#\n#.#.#####.#####.#.###########.#.#.#.###.#.#######.###.#######.#####.#.#########.#\n#.#.............#...............#.................#.........#.................M.#\n#######################################.@.#######################################\n#.#...#.......#...............................#.........#.........#..d#...#.....#\n#.#.#.#.#####.#.#######################.###.#.#.#######.#.###.###.###.#.#.#.#.#K#\n#...#...#...#.#.#...#.................#.#...#.#.#.#.....#...#.#.#.....#.#...#.#.#\n#.#########.#.#.#.#.#.###############.#.#.###.#.#.#.#########.#.#####.#.#####.###\n#.....#...#.#.#.#.#.#.#...#.........#...#.#...#.#.#.......#...#.#.....#.....#...#\n#####.#.#.#.#.#.#.#.#.#.#.#.#####.#####.#.#.###.#.#######.#.###.#.#########.###.#\n#...#.#.#...#.....#.#.#.#.#...#...#...#.#.#.#...#...........#.....#.......#.#...#\n#.#.#.#.###.#########.#.#.###.#####.#.#.#.#.###.###.###########.###.###.###.#.#.#\n#.#.#...#.W...#.......#.#...#.......#.#.#.#...#...#.#...#.#...#.#...#l#.#...#.#.#\n#.###.#########.#######.###.#.#######.#.#.###.###.#.#.#.#.#.#.###.###.#.#.###.#.#\n#.....#.........#...#...#...#.......#...#.#...#...#...#...#.#.#.......#.#...#.#.#\n#.#####.#######.#.#.#.###.###.#####.#####.###.#.#####.#####.#.#.#######.###.#.###\n#.#...#.#.....#.#.#...#...#...#...#.....#...#.R.#...#.#.....#.....#...#...#x#...#\n#.#.#.#.###.###.#.#####.#######.#.#######.#.#####.#.###.###########.#.#.###.###.#\n#...#.#...#...#.#.#...#...#...#.#.#.....#.#.#.....#.#...#.#.........#.#.......#.#\n#####.###.###.#.#.###.###.#.#.#.#.#.###.#.#.#.#####.#.###.#.#########.#.#######.#\n#...#...#...#...#...#.......#...#.#...#.#.#...#.#...#.....#.#.......#.#.#.......#\n###.###.###.###.###.#############.###.#.#.#####.#.#######.#.#.#.#####Y###.#####.#\n#...#.....#...#...#.......#.#...#.....#.#.#..i..#.......#.#.#.#.......#...#.#...#\n#.###.#######.###.#######.#.#.#.#######.#.#.###.#####.###.#Q###.#######.###.#.###\n#...#.#.......#..n#.#.....#...#...#.....#.#.#...#...#.#...#.#.#.#...#...#.#...#.#\n#.#.#.#.###.#####.#.#######.#####.#.#####.#.#.###.###.#.###.#.#.#.#.#.###.#.###.#\n#.#...#.#...#...#.....#...#.#...#...#...#...#...#.#...#...#..o#...#.#.#.......#.#\n#.#####.#####.#.#######.#.#.#.#.#####.#.#######.#.#.###.###########.#.#######.#.#\n#.....#...#...#.#.......#.#.#.#.....#.#.#.....#.#.#.....#.........#.#.#...#.....#\n#####L###.#.###.#.#######.#.###.###.###.###.#.#.#.#######.#.#####.#.#.#.#.#######\n#...#.#...#.#...#...#...#.#...#.#.......#...#.#...#.....#.#.....#.#.#.#.#.......#\n#.#.#.#.###.#.#.###.#.#.#.###.#.#######.#.#######.#.#.###.#####.###.#.#.#######.#\n#.#.#.#.....#.#.#...#.#.....#.#.......#.#.......#...#.#...#..j..#..v#.........#.#\n#.#.#.#######.#.#.###.#.#####.###.###.###.#####.###.###.###.###.#.###.#########.#\n#.#.#.#...#...#.#...#.#.#...#...#...#...#...#.#.#...#...#.#.#...#.#.#.#.........#\n###.#.#.#.#.#######.#.###.#.###.#####.#.###.#.#.#.###.###.#.#####.#.#.#.#######.#\n#...#...#.#.........#.....#...#.....#f#.#.....#.....#e..#.#.......#.#.#.#.#...#.#\n#.#######.#################.#.#####.###.#.#############A#.#########.#.#.#.#.#.#.#\n#...#.....#.....#...#.....#.#.....#.....#...#...#.....#...#...#.......#.#.#.#..z#\n#.#.#.#####.###.###.#.###C#.###########.###.#.#T#.#.#####.#.###.#######.#.#.#####\n#.#.#.X.#k..#.#...#...#...#.....#.....#.#...#.#...#.......#.....#....p..#...#...#\n#.#.###.###.#.###.#####.#.#####.#.#.###.#.###.###################.#######.###.#.#\n#.#.........#...........#.....#...#.....#...#.....................#...........#.#\n#################################################################################");

             var result = Part1(input);

             Console.WriteLine(result.StepsTaken);
        }
        [Test]
        public void Test1()
        {
            var input = Parse("#########\n#b.A.@.a#\n#########");

            var result = Part1(input);

            Assert.That(result.StepsTaken, Is.EqualTo(8));
        }
        [Test]
        public void Test2()
        {
            var input = Parse("########################\n#f.D.E.e.C.b.A.@.a.B.c.#\n######################.#\n#d.....................#\n########################");

            var result = Part1(input);

            Assert.That(result.StepsTaken, Is.EqualTo(86));
        }
        [Test]
        public void Test3()
        {
            var input = Parse("########################\n#...............b.C.D.f#\n#.######################\n#.....@.a.B.c.d.A.e.F.g#\n########################");

            var result = Part1(input);

            Assert.That(result.StepsTaken, Is.EqualTo(132));
        }
        [Test]
        public void Test4()
        {
            var input = Parse("#################\n#i.G..c...e..H.p#\n########.########\n#j.A..b...f..D.o#\n########@########\n#k.E..a...g..B.n#\n########.########\n#l.F..d...h..C.m#\n#################");

            var result = Part1(input);

            Assert.That(result.StepsTaken, Is.EqualTo(136));
        }
        [Test]
        public void Test5()
        {
            var input = Parse("########################\n#@..............ac.GI.b#\n###d#e#f################\n###A#B#C################\n###g#h#i################\n########################");

            var result = Part1(input);

            Assert.That(result.StepsTaken, Is.EqualTo(81));
        }

        public static Dictionary<Point, char> Parse(string s)
        {
            var rows = s.Split('\n');
            var returnValue = new Dictionary<Point, char>();
            for (int i = 0; i < rows.Length; i++)
            {
                for (int j = 0; j < rows[i].Length; j++)
                {
                    returnValue[new Point(j, i)] = rows[i][j];
                }
            }
            return returnValue;
        }

        public static World Part1(Dictionary<Point, char> world)
        {
            Point startingPoint = world.First(_ => _.Value == '@').Key;
            world[startingPoint] = '.';
            World start = new World(world, startingPoint);
            var worldsToStep = new List<World>() { start };
            var doneWorlds = new ConcurrentBag<World>();

            while (worldsToStep.Count > 0)
            {
                var nextWorldsToStep = new ConcurrentBag<World>();
                Parallel.ForEach(worldsToStep, w =>
                //foreach (var w in worldsToStep.ToList())
                {
                    var addedWorlds = w.Step();

                    if (addedWorlds == null)
                    {
                        doneWorlds.Add(w);
                    }
                    else
                    {
                        foreach (var item in addedWorlds)
                        {
                            nextWorldsToStep.Add(item);
                        }
                    }
                }
                );

                /*if (doneWorlds.Any())
                    break;*/ //try full search
                worldsToStep = nextWorldsToStep.ToList();
                Console.WriteLine(worldsToStep.Count);
            }

            return doneWorlds.OrderBy(_ => _.StepsTaken).FirstOrDefault();
        }
    }
}